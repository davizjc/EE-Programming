#include <iostream>
 
using namespace std;
 
void Merge(int arr[], int low, int high, int mid)
{
	// We have low to mid and mid+1 to high already sorted.
	int i, j, k, temp[high-low+1];
	i = low; // left
	k = 0;
	j = mid + 1; // right
 
	// Merge the two parts into temp[].
	// deciding if number will be on left or right
	while (i <= mid && j <= high)
	{
		if (arr[i] < arr[j])
		{
			temp[k] = arr[i];
			k++;
			i++;
		}
		else
		{
			temp[k] = arr[j];
			k++;
			j++;
		}
	}
 
	// Insert all the remaining values from i to mid into temp[].
	while (i <= mid)
	{
		temp[k] = arr[i];
		k++;
		i++;
	}
 
	// Insert all the remaining values from j to high into temp[].
	while (j <= high)
	{
		temp[k] = arr[j];
		k++;
		j++;
	}
 
 
	// Assign sorted data stored in temp[] to arr[].
	for (i = low; i <= high; i++)
	{
		arr[i] = temp[i-low];
	}
}
 
// A function to split array into two parts.
void MergeSort(int arr[], int low, int high)
{
	int mid;
	if (low < high)
	{
		mid=(low+high)/2;
		// Split the data into two half.
		MergeSort(arr, low, mid); 
    // half 1 
		MergeSort(arr, mid+1, high);
    //half 2
		Merge(arr, low, high, mid);
    // Merge them to get sorted output.
	}
}


int main()
{
    int arr[] = { 12, 11, 13, 5, 6 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    MergeSort(arr, 0, n-1);
    for (int i = 0; i < n; i++)
        cout<< arr[i] << " ";
    return 0;
}
 


