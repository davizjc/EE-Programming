#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void Merge(int arr[], int low, int high, int mid)
{
	// We have low to mid and mid+1 to high already sorted.
	int i, j, k, temp[high-low+1];
	i = low; // left
	k = 0;
	j = mid + 1; // right
	// Merge the two parts into temp[].
	while (i <= mid && j <= high)
	{
		if (arr[i] < arr[j])
		{
			temp[k] = arr[i];
			k++;
			i++;
		}
		else
		{
			temp[k] = arr[j];
			k++;
			j++;
		}
	}

	while (i <= mid)
	{
		temp[k] = arr[i];
		k++;
		i++;
	}
	while (j <= high)
	{
		temp[k] = arr[j];
		k++;
		j++;
	}
	for (i = low; i <= high; i++)
	{
		arr[i] = temp[i-low];
	}
}
 
// A function to split array into two parts.
void MergeSort(int arr[], int low, int high)
{
	int mid;
	if (low < high)
	{
		mid=(low+high)/2;
		// Split the data into two half.
		MergeSort(arr, low, mid); 
    // half 1 
		MergeSort(arr, mid+1, high);
    //half 2
		Merge(arr, low, high, mid);
    // Merge them to get sorted output.
	}
}

int kthSmallest(int arr[], int n, int k)
{
    // Sort the given array
    MergeSort(arr,0,n-1);
 
    // Return k'th element in the sorted array
    return arr[k];
}

int kthBig(int arr[], int n, int k)
{
    // Sort the given array
    MergeSort(arr,0,n-1);
 
    // Return k'th element in the sorted array
    return arr[k+n-1];
}

 
// Driver program to test above methods
int main()
{
    int arr[] = { 12, 3, 5, 7, 19 };
    int n = sizeof(arr) / sizeof(arr[0]), k = 0;
    cout << kthSmallest(arr, n, k)<<" "<<kthBig(arr,n,k);
    return 0;
}

