#include <iostream>
using namespace std;
 
int mergeSort(int a[], int l, int r) {
  if (l == r) {
    return 0; 
  } 
  else {
    int mid = (l+r)/2;
    int first = mergeSort(a, l, mid);
    int second = mergeSort(a, mid+1, r);

    int i=l;
    int j=mid+1;
    int k=0;
    int output[r-l+1];
    int inversion=0;

    while (i <= mid && j <= r) {
       if (a[i] <= a[j]) {
         output[k++] = a[i++];
       } else {
         output[k++] = a[j++];
         inversion += (mid-i)+1;
       }
    }
    while (i <= mid) {
       output[k++] = a[i++];
    }
    while (j <= r) {
       output[k++] = a[j++];
    }
    for (int i = l; i <= r; i++) {
      a[i] = output[k++];
    }
    return inversion + first + second;
  }
}

 
// Driver Code
int main()
{  
  int n;
  cin >> n; // Input the length of the sorted array
  int *arr = (int*)malloc(sizeof(int)*n);

  for(int i=0; i<n; i++)
    cin >> arr[i];

    
    cout  << mergeSort(arr,0, n-1);
    return 0;
}


  

